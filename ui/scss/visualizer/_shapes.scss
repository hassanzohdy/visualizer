//Colors - Not needed for demo
$r: #c03;
$g: #429032;
$b: #2963BD;
$y: #c90;
//Shapes demo starts
@mixin rectangle($width, $height, $color) {
    width: $width;
    height: $height;
    background: $color;
}

@mixin parallelogram($width, $height, $skew, $color) {
    @include rectangle($width, $height, $color);
    background: $color;
    transform: skew($skew);
}

@mixin square($size, $color) {
    @include rectangle($size, $size, $color);
}

@mixin circle($size, $color) {
    @include square($size, $color);
    border-radius: $size / 2;
}

@mixin oval($width, $height, $color) {
    width: $width;
    height: $height;
    border-radius: #{$width} / #{$height};
    background: $color;
}

@mixin triangle($direction, $size, $color) {
    width: 0;
    height: 0;
    @if $direction=='up' {
        border-right: $size solid transparent;
        border-bottom: $size * 1.732 solid $color;
        border-left: $size solid transparent;
    }
    @else if $direction=='down' {
        border-top: $size * 1.732 solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    }
    @else if $direction=='left' {
        border-top: $size solid transparent;
        border-right: $size * 1.732 solid $color;
        border-bottom: $size solid transparent;
    }
    @else if $direction=='right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size * 1.732 solid $color;
    }
}

@mixin corner-triangle($corner, $size, $color) {
    width: 0;
    height: 0;
    @if $corner=='top-left' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
    }
    @else if $corner=='top-right' {
        border-top: $size solid $color;
        border-left: $size solid transparent;
    }
    @else if $corner=='bottom-left' {
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
    }
    @else if $corner=='bottom-right' {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }
}

@mixin top-right-triangle($size, $color) {
    @include corner-triangle(top-right, $size, $color);
}

@mixin top-left-triangle($size, $color) {
    @include corner-triangle(top-left, $size, $color);
}

@mixin trapezoid($width, $color) {
    width: $width;
    height: 0;
    border-right: $width / 2 solid transparent;
    border-bottom: $width solid $color;
    border-left: $width / 2 solid transparent;
    box-sizing: content-box; //If you have 'box-sizing:border-box' the trapezoid doesn't work.
}

@mixin chevron($direction, $width, $height, $skew, $color) {
    position: relative;
    width: $width;
    height: $height;
    &:before,
    &:after {
        position: absolute;
        top: 0;
        width: 50%;
        height: 100%;
        background: $color;
        content: '';
    }
    &:before {
        left: 0;
        transform: skew(0deg, $skew);
    }
    &:after {
        right: 0;
        transform: skew(0deg, -$skew);
    }
}

@mixin hexagon($width, $height, $color) {
    height: $height;
    padding: 0 $width;
    background: $color;
    font-size: $height / 2;
    display: inline-block;
    position: relative;
    line-height: 1.8;
    &:before,
    &:after {
        position: absolute;
        content: "";
        height: 0;
        width: 0;
        top: 0;
        border-top: $height / 2 solid transparent;
        border-bottom: $height / 2 solid transparent;
        transform: rotateY(180deg);
    }
    &:before {
        left: 100%;
        border-right: $height / 2 solid $color;
    }
    &:after {
        right: 100%;
        border-left: $height / 2 solid $color;
    }
}

//Usage:
.parallelogram {
    @include parallelogram(100px, 70px, 10deg, $r);
}

.oval {
    @include oval(100px, 50px, $g);
}

.up-triangle {
    @include triangle(up, 60px, $b);
}

.down-triangle {
    @include triangle(down, 60px, $y);
}

.left-triangle {
    @include triangle(left, 60px, $r);
}

.right-triangle {
    @include triangle(right, 60px, $g);
}

.top-left-triangle {
    @include corner-triangle(top-left, 120px, $b);
}

.top-right-triangle {
    @include corner-triangle(top-right, 120px, $y);
}

.bottom-left-triangle {
    @include corner-triangle(bottom-left, 120px, $r);
}

.bottom-right-triangle {
    @include corner-triangle(bottom-right, 120px, $g);
}

.trapezoid {
    @include trapezoid(80px, $b);
}

.chevron {
    @include chevron(down, 120px, 40px, 15deg, $y);
}

.hexagon {
    @include hexagon(30px, 62px, $r);
}

// or separator
.or-separator-container {
    margin-top: 7rem;
    .or-spacer {
        position: relative;
        display: inline-block;
        width: 5rem;
        vertical-align: text-top;
        .mask {
            overflow: hidden;
            height: 120px;
            &:before {
                position: absolute;
                content: '';
                display: block;
                bottom: 120%;
                width: 3px;
                left: 50%;
                z-index: 100000;
                height: 50px;
                box-shadow: 0 0 8px #999;
            }
            &:after {
                content: '';
                display: block;
                position: absolute;
                top: 23%;
                width: 3px;
                height: 50px;
                left: 50%;
                box-shadow: 0 0 8px #999;
            }
        }
        span {
            $size: 50px;
            width: $size;
            height: $size;
            position: absolute;
            bottom: 100%;
            margin-bottom: -$size/2;
            left: 50%;
            font-size: 1.4rem;
            margin-left: -$size/2;
            border-radius: 100%;
            box-shadow: 0 2px 4px #999;
            background: white;
            i {
                $offset: 4px;
                position: absolute;
                top: 8px;
                bottom: $offset;
                left: $offset;
                right: $offset;
                text-transform: uppercase;
                border-radius: 100%;
                border: 1px dashed #aaa;
                text-align: center;
                line-height: 40px;
                font-style: normal;
                color: #999;
            }
        }
    }
}